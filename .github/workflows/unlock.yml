name: Terraform Force Unlock

on:
  workflow_dispatch:
    inputs:
      lock_id:
        description: "Terraform lock ID"
        required: true
      working_directory:
        description: "Terraform working directory"
        required: true
        type: choice
        options:
          - awsenv/dev/env
          - awsenv/dev/group
          - awsenv/dev/singleton
      environment:
        description: "Terraform environment"
        required: true
        type: choice
        options:
          - dev01
          - dev02
          - prd01
permissions:
  id-token: write
  contents: read

jobs:
  force-unlock:
    name: Force Unlock Terraform State
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-1
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      WORKING_DIR: ${{ github.event.inputs.working_directory }}
      INPUT_LOCK_ID: ${{ github.event.inputs.lock_id }}
      TF_VAR_FILE: /tfvars/${{ github.event.inputs.environment }}.tfvars

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via Assume Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          role-duration-seconds: 1800
          aws-region: ap-southeast-1
          role-session-name: github-athena-session

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.5

      - name: Init Terraform
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform init

      - name: Select workspace
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform workspace select "$ENVIRONMENT"

      - name: Terraform Plan (capture lock error)
        working-directory: ${{ env.WORKING_DIR }}
        id: tf_plan
        continue-on-error: true
        run: |
          terraform plan -input=false -no-color > plan_output.txt 2>&1
          cat plan_output.txt

      - name: Extract lock ID from error
        id: extract_lock
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Extract the Lock ID using grep/sed from plan output
          LOCK_ID=$(grep -oP 'ID:\s*\K[a-f0-9-]+' plan_output.txt | head -n 1)
          echo "Detected LOCK_ID: $LOCK_ID"
          echo "lock_id=$LOCK_ID" >> "$GITHUB_OUTPUT"

      - name: Force Unlock if Lock ID Matches
        if: steps.extract_lock.outputs.lock_id == env.INPUT_LOCK_ID
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Lock ID matches input, attempting force unlock..."
          if terraform force-unlock -force "$INPUT_LOCK_ID"; then
            echo "✅ Unlock success"
          else
            echo "❌ Unlock failed"
          fi
          rm -f plan_output.txt

      - name: Skip Force Unlock (Lock ID doesn't match)
        if: steps.extract_lock.outputs.lock_id != env.INPUT_LOCK_ID
        run: echo "Provided lock_id does not match detected lock. Skipping unlock."
